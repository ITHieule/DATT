package services

import (
	"errors"
	"fmt"
	"web-api/internal/api/until"
	"web-api/internal/pkg/database"
	"web-api/internal/pkg/models/request"
	"web-api/internal/pkg/models/types"

	"golang.org/x/crypto/bcrypt"
)

type UserService struct {
	*BaseService
}

var User = &UserService{}

func (s *UserService) UpdateUserSevice(requestParams *request.CreateUserRequest) ([]types.User, error) {
	var Sizes []types.User

	// K·∫øt n·ªëi database
	db, err := database.FashionBusiness()
	if err != nil {
		fmt.Println("Database connection error:", err)
		return nil, err
	}
	dbInstance, _ := db.DB()
	defer dbInstance.Close()

	// M√£ h√≥a m·∫≠t kh·∫©u n·∫øu c√≥ thay ƒë·ªïi
	var hashedPassword string
	if requestParams.Password != "" { // Ki·ªÉm tra n·∫øu m·∫≠t kh·∫©u ƒë∆∞·ª£c cung c·∫•p
		hashedPassword, err = HashPassword(requestParams.Password)
		if err != nil {
			fmt.Println("Password hashing error:", err)
			return nil, err
		}
	}

	// Truy v·∫•n SQL c·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng
	query := `
        UPDATE users
        SET password_hash = COALESCE(?, password_hash),
		name = ?,
            email = ?,
            phone = ?,
			avatar_url = ?
        WHERE id = ?
    `

	err = db.Exec(query,
		hashedPassword, // M·∫≠t kh·∫©u ƒë√£ m√£ h√≥a ho·∫∑c NULL ƒë·ªÉ gi·ªØ nguy√™n
		requestParams.Name,
		requestParams.Email,
		requestParams.Phone,
		requestParams.AvatarURL,
		requestParams.ID,
	).Error

	if err != nil {
		fmt.Println("Query execution error:", err)
		return nil, err
	}

	return Sizes, nil
}

func (s *UserService) Register(requestParams *request.CreateUserRequest) ([]types.User, error) {
	var User []types.User

	// K·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu
	db, err := database.FashionBusiness()
	if err != nil {
		fmt.Println("‚ùå Database connection error:", err)
		return nil, err
	}

	// Log m·∫≠t kh·∫©u tr∆∞·ªõc khi hash
	fmt.Println("üîç M·∫≠t kh·∫©u nh·∫≠n t·ª´ FE:", requestParams.Password)

	// M√£ h√≥a m·∫≠t kh·∫©u
	hashedPassword, err := HashPassword(requestParams.Password) // ‚úÖ FE g·ª≠i "password", BE hash r·ªìi l∆∞u
	if err != nil {
		return nil, err
	}

	// Log m·∫≠t kh·∫©u ƒë√£ hash
	fmt.Println("‚úÖ M·∫≠t kh·∫©u sau khi hash:", hashedPassword)

	// L∆∞u v√†o database v·ªõi c·ªôt "password_hash"
	query := "INSERT INTO users (name, email, password_hash, phone) VALUES (?, ?, ?, ?)"
	err = db.Raw(query,
		requestParams.Name,
		requestParams.Email,
		hashedPassword, // ‚úÖ L∆∞u v√†o c·ªôt "password_hash" trong DB
		requestParams.Phone,
	).Scan(&User).Error

	if err != nil {
		fmt.Println("‚ùå Query execution error:", err)
	}

	return User, nil
}
func (s *UserService) Login(requestParams *request.LoginRequests) (string, error) {
	var user types.User

	// Log d·ªØ li·ªáu nh·∫≠n t·ª´ FE
	fmt.Println("üì• Nh·∫≠n request login:", requestParams)

	// K·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu
	db, err := database.FashionBusiness()
	if err != nil {
		fmt.Println("‚ùå L·ªói k·∫øt n·ªëi DB:", err)
		return "", err
	}
	dbInstance, _ := db.DB()
	defer dbInstance.Close()

	// Truy v·∫•n th√¥ng tin ng∆∞·ªùi d√πng d·ª±a tr√™n email
	query := "SELECT * FROM users WHERE email = ?"
	err = db.Raw(query, requestParams.Email).Scan(&user).Error

	if err != nil {
		fmt.Println("‚ùå Kh√¥ng t√¨m th·∫•y user v·ªõi email:", requestParams.Email)
		return "", errors.New("email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng")
	}

	// Log d·ªØ li·ªáu user t·ª´ DB
	fmt.Println("‚úÖ T√¨m th·∫•y user trong DB:", user)

	// So s√°nh m·∫≠t kh·∫©u ƒë√£ hash
	err = bcrypt.CompareHashAndPassword([]byte(user.Password_hash), []byte(requestParams.Password)) // ‚úÖ FE g·ª≠i "password", BE ki·ªÉm tra hash
	if err != nil {
		fmt.Println("‚ùå M·∫≠t kh·∫©u kh√¥ng kh·ªõp cho user:", requestParams.Email)
		fmt.Println("üîç M·∫≠t kh·∫©u nh·∫≠p v√†o:", requestParams.Password)
		fmt.Println("üîç M·∫≠t kh·∫©u m√£ h√≥a trong DB:", user.Password_hash)
		return "", errors.New("email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng")
	}

	// T·∫°o JWT token
	token, err := until.GenerateJWT(user.ID, user.Role, user.Name)
	if err != nil {
		fmt.Println("‚ùå L·ªói khi t·∫°o JWT token:", err)
		return "", err
	}

	// Log token tr∆∞·ªõc khi tr·∫£ v·ªÅ
	fmt.Println("‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng, token:", token)

	return token, nil
}

// H√†m m√£ h√≥a m·∫≠t kh·∫©u
func HashPassword(Password string) (string, error) {
	hashedPassword, err := bcrypt.GenerateFromPassword([]byte(Password), bcrypt.DefaultCost)
	if err != nil {
		return "", err
	}
	return string(hashedPassword), nil
}
